from binascii import unhexlify

def pkcs7_pad(b, bs):
    p=bs-(len(b)%bs or bs)
    return b+bytes([p])*p
def pkcs7_unpad(b):
    p=b[-1]
    return b[:-p]

IP=[58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7]
FP=[40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25]
E=[32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1]
P=[16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25]
PC1=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4]
PC2=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32]
SH=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
S=[[[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],[0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],[4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],[15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],
[[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],[3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],[0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],[13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],
[[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],[13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],[13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],[1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],
[[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],[13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],[10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],[3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],
[[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],[14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],[4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],[11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],
[[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],[10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],[9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],[4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],
[[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],[13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],[1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],[6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],
[[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],[1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],[7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],[2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]

def perm(x, table, nin):
    y=0
    for i,p in enumerate(table):
        y|=((x>>(nin-p))&1)<<(len(table)-1-i)
    return y

def rot28(x, s): 
    return ((x<<s)|(x>>(28-s))) & ((1<<28)-1)

def key_schedule(k64):
    k56=perm(k64,PC1,64)
    c=k56>>28; d=k56&((1<<28)-1)
    ks=[]
    for i in range(16):
        c=rot28(c,SH[i]); d=rot28(d,SH[i])
        ks.append(perm((c<<28)|d,PC2,56))
    return ks

def feistel(r, k):
    e=perm(r,E,32)
    x=e^k
    out=0
    for i in range(8):
        chunk=(x>>(42-6*i))&0x3f
        row=((chunk&0x20)>>4)|(chunk&1)
        col=(chunk>>1)&0xf
        out=(out<<4)|S[i][row][col]
    return perm(out,P,32)

def des_block(b, ks):
    x=perm(b,IP,64)
    l=(x>>32)&0xffffffff; r=x&0xffffffff
    for i in range(16):
        l,r=r,(l^feistel(r,ks[i]))
    x=(r<<32)|l
    return perm(x,FP,64)

def des_ecb_enc(pt, key8):
    k64=int.from_bytes(key8,'big')
    ks=key_schedule(k64)
    pt=pkcs7_pad(pt,8)
    out=b''
    for i in range(0,len(pt),8):
        b=int.from_bytes(pt[i:i+8],'big')
        out+=des_block(b,ks).to_bytes(8,'big')
    return out

def des_ecb_dec(ct, key8):
    k64=int.from_bytes(key8,'big')
    ks=key_schedule(k64)[::-1]
    out=b''
    for i in range(0,len(ct),8):
        b=int.from_bytes(ct[i:i+8],'big')
        out+=des_block(b,ks).to_bytes(8,'big')
    return pkcs7_unpad(out)

Sbox=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22]
InvS=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125]
Rcon=[0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36]

def xor_bytes(a,b): return bytes(i^j for i,j in zip(a,b))
def sub_bytes(s): return bytes(Sbox[b] for b in s)
def inv_sub(s): return bytes(InvS[b] for b in s)

def shift_rows(s):
    a=[list(s[i:i+4]) for i in range(0,16,4)]
    for r in range(1,4): a[r]=a[r][r:]+a[r][:r]
    return bytes(sum(a,[]))
def inv_shift(s):
    a=[list(s[i:i+4]) for i in range(0,16,4)]
    for r in range(1,4): a[r]=a[r][-r:]+a[r][:-r]
    return bytes(sum(a,[]))

def xtime(x): return ((x<<1)&0xff) ^ (0x1b if x&0x80 else 0)
def mix_columns(s):
    s=list(s)
    for c in range(4):
        i=c
        a0,a1,a2,a3=s[i],s[i+4],s[i+8],s[i+12]
        t=a0^a1^a2^a3
        u=a0
        s[i]   ^= t ^ xtime(a0^a1)
        s[i+4] ^= t ^ xtime(a1^a2)
        s[i+8] ^= t ^ xtime(a2^a3)
        s[i+12]^= t ^ xtime(a3^u)
    return bytes(s)

def mul(x,y):
    r=0
    for _ in range(8):
        if y&1: r^=x
        h=x&0x80
        x=(x<<1)&0xff
        if h: x^=0x1b
        y>>=1
    return r
def inv_mix_columns(s):
    s=list(s)
    for c in range(4):
        i=c
        a0,a1,a2,a3=s[i],s[i+4],s[i+8],s[i+12]
        s[i]   = mul(a0,14)^mul(a1,11)^mul(a2,13)^mul(a3,9)
        s[i+4] = mul(a0,9)^mul(a1,14)^mul(a2,11)^mul(a3,13)
        s[i+8] = mul(a0,13)^mul(a1,9)^mul(a2,14)^mul(a3,11)
        s[i+12]= mul(a0,11)^mul(a1,13)^mul(a2,9)^mul(a3,14)
    return bytes(s)

def add_round_key(s,k): return xor_bytes(s,k)

def key_expansion(key16):
    w=[0]*176
    w[:16]=key16
    for i in range(16,176,4):
        t=w[i-4:i]
        if i%16==0:
            t=t[1:]+t[:1]
            t=[Sbox[b] for b in t]
            t[0]^=Rcon[i//16]
        for j in range(4):
            w[i+j]=w[i-16+j]^t[j]
    return [bytes(w[r:r+16]) for r in range(0,176,16)]

def aes128_enc_block(b, rk):
    s=add_round_key(b,rk[0])
    for r in range(1,10):
        s=sub_bytes(s); s=shift_rows(s); s=mix_columns(s); s=add_round_key(s,rk[r])
    s=sub_bytes(s); s=shift_rows(s); s=add_round_key(s,rk[10])
    return s

def aes128_dec_block(b, rk):
    s=add_round_key(b,rk[10])
    for r in range(9,0,-1):
        s=inv_shift(s); s=inv_sub(s); s=add_round_key(s,rk[r]); s=inv_mix_columns(s)
    s=inv_shift(s); s=inv_sub(s); s=add_round_key(s,rk[0])
    return s

def aes_ecb_enc(pt, key_hex):
    key=unhexlify(key_hex)
    rk=key_expansion(list(key))
    pt=pkcs7_pad(pt,16)
    out=b''
    for i in range(0,len(pt),16):
        out+=aes128_enc_block(pt[i:i+16],rk)
    return out

def aes_ecb_dec(ct, key_hex):
    key=unhexlify(key_hex)
    rk=key_expansion(list(key))
    out=b''
    for i in range(0,len(ct),16):
        out+=aes128_dec_block(ct[i:i+16],rk)
    return pkcs7_unpad(out)

# ---- DES task ----
msg_des=b"Confidential Data"
key_des=b"A1B2C3D4"
ct_des=des_ecb_enc(msg_des,key_des)
pt_des=des_ecb_dec(ct_des,key_des)

# ---- AES task ----
msg_aes=b"Sensitive Information"
key_aes="0123456789ABCDEF0123456789ABCDEF"  # hex -> 16-byte key
ct_aes=aes_ecb_enc(msg_aes,key_aes)
pt_aes=aes_ecb_dec(ct_aes,key_aes)

print("DES Ciphertext:", ct_des.hex())
print("DES Decrypted:", pt_des.decode())
print("AES-128 Ciphertext:", ct_aes.hex())
print("AES-128 Decrypted:", pt_aes.decode())
